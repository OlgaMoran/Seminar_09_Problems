// ДЗ . Есть два массива info и data.
// Массив data состоит из нулей и единиц хранящий числа в двоичном представлении. 
// Числа идут друг за другом без разделителей.
// Массив info состоит из чисел, которые представляют количество бит чисел из массива data.

// Составить массив десятичных представлений чисел массива data с учётом информации из массива info.

// Example:
// data = {0, 1, 1, 1, 1, 0, 0, 0, 1 }
// info = {2, 3, 3, 1 }
// output: 1, 7, 0, 1


// My example:
// int data = { 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0}
// int info = {3, 3, 4, 2}
// output: 5, 4, 15, 2

// Максимально подробно описать, какие ошибки могут возникнуть при обработке наборов данных?

// 1. Возможная ошибка на этапе ввода данных: количество элементов в массиве data 
//    может не совпадать с суммой элементов в массиве info. 
//    К примеру, в нашем случае все верно(12 элементов = 3 + 3 + 4 + 2). 
// Но если добавить хоть один "ноль" или "единицу" к массиву data, то "конвертация" не получится.

// 2. Код может быть написан таким образом, что компьютер может начать "читать" двоичное число не справа налево, 
// а слева направо. Т.е. вместо, например, 100 (т.е. 4 в десятичной системе) может получиться 001 (т.е. десятичное 1).
// Можно избежать этой ошибки, мне кажется, если начать обращаться к обоим массивам с конца.



// Примечание: 
// Я отлично понимаю, что задание было 
// составить массив десятичных представлений чисел массива c числами в двоичной системе. 
// Но мне захотелось создать метод для подобного вычисления.
// Понимаю, что "всё уже придумано до нас", однако же попытаться стоило. 

void ToDecimalFromBinary(int[] arr1, int[] arr2)
{
    int index = 0; // position in data
    int pos = 0; // position in info

    for (pos = 0; pos < arr2.Length; pos++)
    {
        for (int j = 0; j < arr2[pos]; j = index + arr2[pos])
        {
            int[] hold = new int[arr2[pos]];
            for (int i = 0; i < arr2[pos]; i++)
            {
                hold[i] = arr1[index];
                index++;
            }
            int q = hold.Length - 1;
            int k = 0;
            double dec = 0;
            dec = hold[k] * Math.Pow(2, q);
            for (k = 1; k < hold.Length; k++)
            {
                dec = dec + hold[k] * Math.Pow(2, q - 1);
                q--;
            }
            System.Console.Write($"{dec}  ");

        }
    }
}
int[] data = { 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0 };
int[] info = { 3, 3, 4, 2 };
ToDecimalFromBinary(data, info);
